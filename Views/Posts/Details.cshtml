@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@model BlogApp.Models.Post
@{
    ViewData["Title"] = Model.Title;
}

<div class="container py-4">
    <div class="mt-4"></div>
        <a asp-controller="Blogs" asp-action="Details" asp-route-id="@Model.BlogId" class="btn btn-secondary">Back to Posts</a>
    </div>
    <h1>@Model.Title</h1>
    

    @if (Model.PostTags.Any())
    {
        <p>
            <strong>Tags:</strong>
            @foreach (var pt in Model.PostTags)
            {
                <a asp-controller="Posts" asp-action="Index" asp-route-tagId="@pt.Tag.Id" class="badge bg-primary text-white me-1">
                    @pt.Tag.Name
                </a>
            }
        </p>
    }

    <p class="text-muted">Posted on @Model.CreatedAt.ToString("g") • Views: @Model.ViewCount</p>

    @if (!string.IsNullOrEmpty(Model.ImagePath))
    {
        <div class="mb-4">
            <img src="@Model.ImagePath" alt="Post image test" style="width:300px;" />
        </div>
    }
    <form method="post" asp-controller="Posts" asp-action="RatePost" id="ratingForm">
        <input type="hidden" name="postId" value="@Model.Id" />
        <input type="hidden" name="rating" id="ratingInput" value="@ViewBag.UserRating" />
        <div class="star-rating mb-2" style="font-size: 1.8rem; cursor: pointer;">
            @for (int i = 1; i <= 5; i++)
            {
                <i class="@(i <= ViewBag.UserRating ? "fas" : "far") fa-star" data-value="@i"></i>
            }
        </div>
    </form>

    @{
        int fullStars = 0;
        bool halfStar = false;
        int emptyStars = 5;

        if (Model.AverageRating.HasValue)
        {
            fullStars = (int)Math.Floor(Model.AverageRating.Value);
            halfStar = Model.AverageRating.Value - fullStars >= 0.5;
            emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
        }
    }

    @if (Model.AverageRating.HasValue)
    {
        <div class="rating-display mb-3">
            <strong>Average Rating:</strong>
            <span class="text-warning">
                @for (int i = 0; i < fullStars; i++) { <i class="fas fa-star"></i> }
                @if (halfStar) { <i class="fas fa-star-half-alt"></i> }
                @for (int i = 0; i < emptyStars; i++) { <i class="far fa-star"></i> }
            </span>
            <span class="text-muted">(@Model.AverageRating.Value.ToString("0.0") / 5)</span>
        </div>
    }



    <div class="mb-5">
        @Html.Raw(Model.Content.Replace("\n", "<br/>"))
        <div class="mt-3 vote-buttons">
            <button class="btn btn-sm btn-outline-success vote-btn" data-id="@Model.Id" data-is-upvote="true">
                <i class="bi bi-hand-thumbs-up"></i> <span class="count">@Model.Likes</span>
            </button>
            <button class="btn btn-sm btn-outline-danger vote-btn" data-id="@Model.Id" data-is-upvote="false">
                <i class="bi bi-hand-thumbs-down"></i> <span class="count">@Model.Dislikes</span>
            </button>
        </div>
    </div>

    <h3>Comments</h3>
    @if (!Model.Comments.Any())
    {
        <p>No comments yet.</p>
    }
    else
    {
        <ul class="list-group mb-4 limited-width">
            @foreach (var c in Model.Comments)
            {
                <li class="list-group-item dynamic-bg">

                    <small class="text-muted d-block" style="font-size: 1.3rem; font-weight: 600;"> @c.User.UserName - @c.CreatedAt.ToString("g")</small> 

                    <div style="font-size: 1.1rem;">@c.Content</div>

                    @if (!string.IsNullOrEmpty(c.ImagePath))
                    {
                        <div class="mt-2">
                            <img src="@c.ImagePath" class="fixed-image" alt="Comment image" />
                        </div>
                    }

                    <br />

                    <div class="mt-2 vote-buttons">
                        <button class="btn btn-xs btn-outline-success comment-vote"
                                data-id="@c.Id" data-is-upvote="true">
                            <i class="bi bi-hand-thumbs-up"></i> <span class="count">@c.Likes</span>
                        </button>
                        <button class="btn btn-xs btn-outline-danger comment-vote"
                                data-id="@c.Id" data-is-upvote="false">
                            <i class="bi bi-hand-thumbs-down"></i> <span class="count">@c.Dislikes</span>
                        </button>
                         <br />
                         <br />
                         @if (c.UserId == UserManager.GetUserId(User) || User.IsInRole("Admin"))
                            {
                                <span class="float-end">
                                    <a asp-action="Edit" asp-controller="Comments" asp-route-id="@c.Id" class="btn btn-outline-warning btn-sm">Edit</a>
                                    <a asp-action="Delete" asp-controller="Comments" asp-route-id="@c.Id" class="btn btn-outline-danger btn-sm">Delete</a>
                                </span>
                            }              
                    </div>
                </li>
            }
        </ul>
    }

    <h5>Add a comment</h5>
    <form asp-controller="Comments" asp-action="Create" method="post" class="mb-5" enctype="multipart/form-data">
        <input type="hidden" name="postId" value="@Model.Id" />
        <div class="mb-3">
            <textarea name="Content" class="form-control" rows="3" placeholder="Your comment"></textarea>
        </div>
        <div class="mb-3">
            <label class="form-label">Add image (optional)</label>
            <input type="file" name="imageFile" class="form-control" accept="image/*" />
        </div>
        <button class="btn btn-primary">Post Comment</button>
    </form>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.vote-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const postId = this.dataset.id;
                const isUpvote = this.dataset.isUpvote === 'true';

                try {
                    const response = await fetch(`/Posts/VotePost?id=${postId}&isUpvote=${isUpvote}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const container = this.closest('.vote-buttons');
                        container.querySelector('.btn-outline-success .count').textContent = data.likes;
                        container.querySelector('.btn-outline-danger .count').textContent = data.dislikes;
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });

        document.querySelectorAll('.comment-vote').forEach(button => {
            button.addEventListener('click', async function() {
                const commentId = this.dataset.id;
                const isUpvote = this.dataset.isUpvote === 'true';

                try {
                    const response = await fetch(`/Posts/VoteComment?id=${commentId}&isUpvote=${isUpvote}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        const data = await response.json();
                        const container = this.closest('.vote-buttons');
                        container.querySelector('.btn-outline-success .count').textContent = data.likes;
                        container.querySelector('.btn-outline-danger .count').textContent = data.dislikes;
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const stars = document.querySelectorAll('.star-rating i');
            const ratingInput = document.getElementById('ratingInput');
            
            const initialRating = parseInt(ratingInput.value);
            highlightStars(initialRating);

            stars.forEach(star => {
                star.addEventListener('mouseenter', function() {
                    const val = parseInt(this.dataset.value);
                    highlightStars(val);
                });
                
                star.addEventListener('mouseleave', function() {
                    const currentRating = parseInt(ratingInput.value);
                    highlightStars(currentRating);
                });
                
                star.addEventListener('click', async function() {
                    const val = parseInt(this.dataset.value);
                    ratingInput.value = val;
                    highlightStars(val);
                    
                    try {
                        const formData = new FormData(document.getElementById('ratingForm'));
                        const response = await fetch('/Posts/RatePost', {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            if (data.averageRating) {
                                updateAverageRating(data.averageRating);
                            }
                        }
                    } catch (error) {
                        console.error('Błąd podczas wysyłania oceny:', error);
                    }
                });
            });
            
            function highlightStars(value) {
                stars.forEach(star => {
                    const starValue = parseInt(star.dataset.value);
                    star.classList.toggle('fas', starValue <= value);
                    star.classList.toggle('far', starValue > value);
                });
            }
            
            function updateAverageRating(average) {
                document.querySelector('.rating-display .text-muted').textContent = 
                    `(${average.toFixed(1)} / 5)`;
                
                const fullStars = Math.floor(average);
                const hasHalfStar = average - fullStars >= 0.5;
                
                const averageStars = document.querySelectorAll('.rating-display i');
                averageStars.forEach((star, index) => {
                    star.className = index < fullStars ? 'fas fa-star' : 
                                    (hasHalfStar && index === fullStars ? 'fas fa-star-half-alt' : 'far fa-star');
                });
            }
        });
    </script>
}
