@model BlogApp.Models.Post
@{
    ViewData["Title"] = Model.Title;
}

<div class="container py-4">
    <h1>@Model.Title</h1>
    <p class="text-muted">Posted on @Model.CreatedAt.ToString("g") • Views: @Model.ViewCount</p>

    @if (!string.IsNullOrEmpty(Model.ImagePath))
    {
        <div class="mb-4">
            <img src="@Model.ImagePath" alt="Post image" class="img-fluid" />
        </div>
    }

    <div class="mb-5">
        @Html.Raw(Model.Content.Replace("\n", "<br/>"))
        <div class="mt-3 vote-buttons">
            <button class="btn btn-sm btn-outline-success vote-btn" data-id="@Model.Id" data-is-upvote="true">
                <i class="bi bi-hand-thumbs-up"></i> <span class="count">@Model.Likes</span>
            </button>
            <button class="btn btn-sm btn-outline-danger vote-btn" data-id="@Model.Id" data-is-upvote="false">
                <i class="bi bi-hand-thumbs-down"></i> <span class="count">@Model.Dislikes</span>
            </button>
        </div>
    </div>

    <h3>Comments</h3>
    @if (!Model.Comments.Any())
    {
        <p>No comments yet.</p>
    }
    else
    {
        <ul class="list-group mb-4">
            @foreach (var c in Model.Comments)
            {
                <li class="list-group-item">
                    <div>@c.Content</div>

                    @if (!string.IsNullOrEmpty(c.ImagePath))
                    {
                        <div class="mt-2">
                            <img src="@c.ImagePath" class="fixed-image" alt="Comment image" />
                        </div>
                    }

                    <br />
                    <small class="text-muted">by @c.UserId on @c.CreatedAt.ToString("g")</small>

                    <div class="mt-2 vote-buttons">
                        <button class="btn btn-xs btn-outline-success comment-vote"
                                data-id="@c.Id" data-is-upvote="true">
                            <i class="bi bi-hand-thumbs-up"></i> <span class="count">@c.Likes</span>
                        </button>
                        <button class="btn btn-xs btn-outline-danger comment-vote"
                                data-id="@c.Id" data-is-upvote="false">
                            <i class="bi bi-hand-thumbs-down"></i> <span class="count">@c.Dislikes</span>
                        </button>
                         <br />
                         <br />
                        <a asp-action="Edit" asp-controller="Comments" asp-route-id="@c.Id" class="btn btn-warning btn-sm ml-2">Edit</a>
                        <a asp-action="Delete" asp-controller="Comments" asp-route-id="@c.Id" class="btn btn-danger btn-sm ml-2">Delete</a>                    </div>
                </li>
            }
        </ul>
    }

    <h5>Add a comment</h5>
    <form asp-controller="Comments" asp-action="Create" method="post" class="mb-5" enctype="multipart/form-data">
        <input type="hidden" name="postId" value="@Model.Id" />
        <div class="mb-3">
            <textarea name="Content" class="form-control" rows="3" placeholder="Your comment"></textarea>
        </div>
        <div class="mb-3">
            <label class="form-label">Add image (optional)</label>
            <input type="file" name="imageFile" class="form-control" accept="image/*" />
        </div>
        <button class="btn btn-primary">Post Comment</button>
    </form>
</div>

@section Scripts {
    <script>
        // Funkcja głosowania dla postów
        document.querySelectorAll('.vote-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const postId = this.dataset.id;
                const isUpvote = this.dataset.isUpvote === 'true';

                try {
                    const response = await fetch(`/Posts/VotePost?id=${postId}&isUpvote=${isUpvote}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        const data = await response.json();
                        // Aktualizuj oba liczniki
                        const container = this.closest('.vote-buttons');
                        container.querySelector('.btn-outline-success .count').textContent = data.likes;
                        container.querySelector('.btn-outline-danger .count').textContent = data.dislikes;
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });

        // Funkcja głosowania dla komentarzy
        document.querySelectorAll('.comment-vote').forEach(button => {
            button.addEventListener('click', async function() {
                const commentId = this.dataset.id;
                const isUpvote = this.dataset.isUpvote === 'true';

                try {
                    const response = await fetch(`/Posts/VoteComment?id=${commentId}&isUpvote=${isUpvote}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        const data = await response.json();
                        // Aktualizuj oba liczniki
                        const container = this.closest('.vote-buttons');
                        container.querySelector('.btn-outline-success .count').textContent = data.likes;
                        container.querySelector('.btn-outline-danger .count').textContent = data.dislikes;
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });
    </script>
}
